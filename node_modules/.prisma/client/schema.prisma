generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banks {
  bank_id      BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  name         String         @db.VarChar(255)
  number       String         @db.VarChar(255)
  holder       String         @db.VarChar(255)
  image        String?        @db.VarChar(255)
  is_active    Int            @default(1) @db.TinyInt
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  deleted_at   DateTime?      @db.Timestamp(0)
  transactions transactions[]
}

model categories {
  category_id BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name        String     @db.VarChar(255)
  slug        String     @db.VarChar(255)
  is_active   Int        @default(1) @db.TinyInt
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  deleted_at  DateTime?  @db.Timestamp(0)
  products    products[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model group_menus {
  group_menu_id BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  group_id      BigInt?   @db.UnsignedBigInt
  menu_id       BigInt?   @db.UnsignedBigInt
  create        Int       @default(0)
  read          Int       @default(0)
  update        Int       @default(0)
  delete        Int       @default(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  deleted_at    DateTime? @db.Timestamp(0)
  groups        groups?   @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: NoAction, map: "group_menus_group_id_foreign")
  menus         menus?    @relation(fields: [menu_id], references: [menu_id], onDelete: Cascade, onUpdate: NoAction, map: "group_menus_menu_id_foreign")

  @@index([group_id], map: "group_menus_group_id_index")
  @@index([menu_id], map: "group_menus_menu_id_index")
}

model groups {
  group_id    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  code        String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  is_active   Int           @default(1)
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  deleted_at  DateTime?     @db.Timestamp(0)
  group_menus group_menus[]
  users       users[]
}

model menus {
  menu_id     BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  code        String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  url         String?       @db.VarChar(255)
  level       Int
  order       Int
  parent_id   Int?
  tag         String        @db.VarChar(255)
  icon        String        @db.VarChar(255)
  is_active   Int           @default(1)
  created_at  DateTime?     @db.Timestamp(0)
  updated_at  DateTime?     @db.Timestamp(0)
  deleted_at  DateTime?     @db.Timestamp(0)
  group_menus group_menus[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model news {
  news_id    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt?   @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  slug       String    @db.VarChar(255)
  content    String    @db.Text
  image      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "news_user_id_foreign")

  @@index([user_id], map: "news_user_id_index")
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model payments {
  payment_id     BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt?       @db.UnsignedBigInt
  transaction_id BigInt?       @db.UnsignedBigInt
  image          String        @db.VarChar(255)
  created_at     DateTime?     @db.Timestamp(0)
  updated_at     DateTime?     @db.Timestamp(0)
  deleted_at     DateTime?     @db.Timestamp(0)
  transactions   transactions? @relation(fields: [transaction_id], references: [transaction_id], onDelete: Cascade, onUpdate: NoAction, map: "payments_transaction_id_foreign")
  users          users?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "payments_user_id_foreign")

  @@index([transaction_id], map: "payments_transaction_id_index")
  @@index([user_id], map: "payments_user_id_index")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model products {
  product_id   BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  category_id  BigInt?        @db.UnsignedBigInt
  name         String         @db.VarChar(255)
  slug         String         @db.VarChar(255)
  description  String?        @db.Text
  image        String?        @db.VarChar(255)
  price        String         @default("0") @db.VarChar(255)
  is_active    Int            @default(1) @db.TinyInt
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  deleted_at   DateTime?      @db.Timestamp(0)
  categories   categories?    @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "products_category_id_foreign")
  transactions transactions[]

  @@index([category_id], map: "products_category_id_index")
}

model transactions {
  transaction_id BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt?    @db.UnsignedBigInt
  bank_id        BigInt?    @db.UnsignedBigInt
  product_id     BigInt?    @db.UnsignedBigInt
  invoice_number String     @db.VarChar(255)
  status         Int        @default(0) @db.TinyInt
  created_at     DateTime?  @db.Timestamp(0)
  updated_at     DateTime?  @db.Timestamp(0)
  deleted_at     DateTime?  @db.Timestamp(0)
  payments       payments[]
  banks          banks?     @relation(fields: [bank_id], references: [bank_id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_bank_id_foreign")
  products       products?  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_product_id_foreign")
  users          users?     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "transactions_user_id_foreign")

  @@index([bank_id], map: "transactions_bank_id_index")
  @@index([product_id], map: "transactions_product_id_index")
  @@index([user_id], map: "transactions_user_id_index")
}

model users {
  user_id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  group_id          BigInt?        @db.UnsignedBigInt
  username          String         @unique(map: "users_username_unique") @db.VarChar(255)
  name              String         @db.VarChar(255)
  email             String         @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?      @db.Timestamp(0)
  password          String         @db.VarChar(255)
  avatar            String?        @db.VarChar(255)
  is_active         Int            @default(1)
  remember_token    String?        @db.VarChar(100)
  created_at        DateTime?      @db.Timestamp(0)
  updated_at        DateTime?      @db.Timestamp(0)
  deleted_at        DateTime?      @db.Timestamp(0)
  news              news[]
  payments          payments[]
  transactions      transactions[]
  groups            groups?        @relation(fields: [group_id], references: [group_id], onDelete: Cascade, onUpdate: NoAction, map: "users_group_id_foreign")

  @@index([group_id], map: "users_group_id_index")
}

model wa_sessions {
  pkId      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId String @db.VarChar(128)
  id        String @db.VarChar(255)
  data      String @db.Text

  @@unique([sessionId, id], map: "unique_id_per_session_id")
  @@index([sessionId], map: "wa_sessions_sessionid_index")
}

model session {
  pkId      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  sessionId String @db.VarChar(128)
  id        String @db.VarChar(255)
  data      String @db.Text

  @@unique([sessionId, id], map: "unique_id_per_session_id")
  @@index([sessionId], map: "session_sessionid_index")
}
